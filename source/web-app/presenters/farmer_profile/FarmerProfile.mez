unit FarmerProfile;

Farmer farmer;
Stock cropType;
Shop messagingShop;
string certificateId;
Stock cropPictureFilter;
CropQualityPicture selectedCropQualityPicture;
CropQualityPicture cropQualityPicture;

void init() {
	farmer = Farmer:user();
}

void cropQualityPicsInit() {
    init();
    cropQualityPicture = CropQualityPicture:new();
}

Stock[] getFarmerCropTypes() {
	return farmer.cropTypes;
}

// Return the stock items that represent crop types, and that have not already been linked to the farmer
Stock[] getEligibleCropTypes() {
	
	// Diff takes two selectors as arguments and returns items that are returned by the first, but not the second selector
	return Stock:diff(
		// Basic equals to only consider stock types that represent crop and not fertilizer
		equals(stockType, STOCK_TYPE.crop_seed), 
		
		// Use relationshipIn for all stocks that are linked to the selected farmer so that it can be excluded from the results
		relationshipIn(farmers, farmer)
	);
}

// Link the selected crop types to the farmer
string addCropType() {
	farmer.cropTypes.append(cropType);
	farmer.cropTypeProfileUpdatedOn = Mez:now();
	return null;
}

// Unlink the selected crop types from the farmer
string removeFarmerCropType() {
	Stock[] farmerCropTypes = farmer.cropTypes;
	// Loop using a for loop with a counter over the farmer crop types collection
	for(int i = 0; i < farmerCropTypes.length(); i++) {
		Stock currentFarmerCropType = farmerCropTypes.get(i);
		// Compare item using internal ids to ensure equivalence
		if(currentFarmerCropType._id == cropType._id) {
			farmerCropTypes.remove(i);
			farmer.cropTypeProfileUpdatedOn = Mez:now();
		}
	}
	cropType = null;
	return null;
}

// Unlink all crop types from the farmer
string removeAllFarmerCropTypes() {
	Stock[] farmerCropTypes = farmer.cropTypes;
	// Loop backwards to avoid skipping over items as the list is reduced
	for(int i = farmerCropTypes.length() - 1; i >= 0; i--) {
		farmerCropTypes.remove(i);
		farmer.cropTypeProfileUpdatedOn = Mez:now();
	}
	return null;
}


DSL_VIEWS backToMenu() {
	return DSL_VIEWS.FarmerProfileMenu;
}


DSL_VIEWS submitMessagingPreferences() {
	farmer.messagingProfileUpdatedOn = Mez:now();
	return DSL_VIEWS.FarmerProfileMessaging;
}

bool messagingOptedIn() {
	if(farmer.smsMessaging || farmer.emailMessaging) {
		return true;
	}
	return false;
}

Shop[] getEligibleShopsForMessaging() {
	return Shop:diff(
		equals(deleted, false),
		relationshipIn(notifiedFarmers, farmer)
	);
}

Shop[] getFarmerShopsForMessaging() {
	return farmer.messagingShops;
}

string addMessagingShop() {
	farmer.messagingShops.append(messagingShop);
	farmer.messagingProfileUpdatedOn = Mez:now();
	return null;
}

string removeMessagingShop() {
	Shop[] farmerMessagingShops = farmer.messagingShops;
	// Loop using a for loop with a counter over the farmer messaging shops collection
	for(int i = 0; i < farmerMessagingShops.length(); i++) {
		Shop currentMessagingShop = farmerMessagingShops.get(i);
		// Compare item using internal ids to ensure equivalence
		if(currentMessagingShop._id == messagingShop._id) {
			farmerMessagingShops.remove(i);
			farmer.messagingProfileUpdatedOn = Mez:now();
		}
	}
	messagingShop = null;
	return null;
}

string removeAllMessagingShops() {
	Shop[] farmerMessagingShops = farmer.messagingShops;
	// Loop backwards to avoid skipping over items as the list is reduced
	for(int i = farmerMessagingShops.length() - 1; i >= 0; i--) {
		farmerMessagingShops.remove(i);
		farmer.messagingProfileUpdatedOn = Mez:now();
	}
	return null;
}

// Manual validation and then save certificate and certificate id
string saveGovernmentAssistanceCertificate() {
	
	if(certificateId == null) {
		Mez:alertError("alert.null_government_assistance_certificate_id");
		return null;
	}
	
	if(farmer.governmentAssistanceCertificate == null) {
		Mez:alertError("alert.null_government_assistance_certificate");
		return null;
	}
	
	uuid parsedId = Uuid:fromString(certificateId);

	if(parsedId == null) {
		farmer.governmentAssistanceCertificate = null;
		Mez:alertError("alert.invalid_government_assistance_certificate_id");
		return null;
	}

	farmer.governmentAssistanceCertificateId = parsedId;
	farmer.documentationProfileUpdatedOn = Mez:now();
	certificateId = null;
	return null;
}

string deleteGovernmentAssistanceCertificate() {
	farmer.governmentAssistanceCertificate = null;
	farmer.governmentAssistanceCertificateId = null;
	farmer.documentationProfileUpdatedOn = Mez:now();
	return null;
}

Farmer[] getCurrentFarmerAsCollection() {
	Farmer[] farmers;
	farmers.append(farmer);
	return farmers;
}

// Hide show file browser based on whether a file has been uploaded
bool showFileBrowser() {
	if(farmer.governmentAssistanceCertificate == null) {
		return false;
	}	
	return true;
}
string applyCropGalleryFilter() {
    selectedCropQualityPicture = null;
    cropQualityPicture = CropQualityPicture:new();
    return null;
}

CropQualityPicture[] getFarmerCropQualityPictures() {
    CropQualityPicture[] result;
    if (cropPictureFilter == null) {
        result = CropQualityPicture:relationshipIn(farmer, farmer);
    } else {
        result = CropQualityPicture:and(relationshipIn(farmer, farmer),
                relationshipIn(cropType, cropPictureFilter));
    }
    result.sortAsc("pictureDate");
    return result;
}

string saveCropQualityPicture() {
    cropQualityPicture.farmer = farmer;
    cropQualityPicture.save(); 
    cropQualityPicture = CropQualityPicture:new();
    farmer.cropQualityPicturesUpdatedOn = Mez:now();
    return null;
}

string editSelectedCropQualityPicture() {
    cropQualityPicture = selectedCropQualityPicture;
    return null;
}

string deleteSelectedCropQualityPicture() {
    CropQualityPicture:delete(selectedCropQualityPicture);
    cropQualityPicture = CropQualityPicture:new();
    farmer.cropQualityPicturesUpdatedOn = Mez:now();
    return null;
}

